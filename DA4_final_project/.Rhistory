DID = sum(DID),
postVar = sum(postVar),
top_level = sum(top_level))
cor_data <- subset(match_season2, select = c('treated',
'postVar',
'top_level',
'avg_yellow_cards',
'avg_fouls',
'avg_red_cards',
"DID"
))
corr_matrix <- cor(cor_data, use = "complete.obs", method = "pearson")
match_season2 <- match_season
match_season2 <- match_season2 %>%
group_by(match) %>%
summarize(avg_red_cards = mean(red_cards),
avg_yellow_cards = mean(yellow_cards),
avg_fouls = mean(fouls),
DID = sum(DID),
postVar = sum(postVar),
top_level = sum(top_level))
cor_data <- subset(match_season2, select = c('treated',
'postVar',
'top_level',
'avg_yellow_cards',
'avg_fouls',
'avg_red_cards',
"DID"
))
match_season2 <- match_season2 %>%
group_by(match) %>%
summarize(avg_red_cards = mean(red_cards),
avg_yellow_cards = mean(yellow_cards),
avg_fouls = mean(fouls),
DID = sum(DID),
postVar = sum(postVar),
top_level = sum(top_level),
treated = sum(treated))
match_season2 <- match_season
match_season2 <- match_season2 %>%
group_by(match) %>%
summarize(avg_red_cards = mean(red_cards),
avg_yellow_cards = mean(yellow_cards),
avg_fouls = mean(fouls),
DID = sum(DID),
postVar = sum(postVar),
top_level = sum(top_level),
treated = sum(treated))
cor_data <- subset(match_season2, select = c('treated',
'postVar',
'top_level',
'avg_yellow_cards',
'avg_fouls',
'avg_red_cards',
"DID"
))
corr_matrix <- cor(cor_data, use = "complete.obs", method = "pearson")
corrplot(corr_matrix,
method = "color",  # Use colors instead of numbers for a cleaner look
type = "upper",     # Show only the upper triangle to save space
tl.cex = 0.8,       # Reduce text size of variable names
number.cex = 0.7,   # Reduce correlation value size
col = colorRampPalette(c("blue", "white", "red"))(200),  # Gradient colors
addCoef.col = "black",  # Show numbers in black on top of colors
tl.col = "black",   # Keep variable labels in black for readability
cl.cex = 0.8        # Reduce legend text size
)
match_season2 <- match_season
match_season2 <- match_season2 %>%
group_by(match) %>%
summarize(avg_red_cards = mean(red_cards),
avg_yellow_cards = mean(yellow_cards),
avg_fouls = mean(fouls),
DID = sum(DID),
top_level = sum(top_level))
cor_data <- subset(match_season2, select = c('top_level',
'avg_yellow_cards',
'avg_fouls',
'avg_red_cards',
"DID"
))
corr_matrix <- cor(cor_data, use = "complete.obs", method = "pearson")
corrplot(corr_matrix,
method = "color",  # Use colors instead of numbers for a cleaner look
type = "upper",     # Show only the upper triangle to save space
tl.cex = 0.8,       # Reduce text size of variable names
number.cex = 0.7,   # Reduce correlation value size
col = colorRampPalette(c("blue", "white", "red"))(200),  # Gradient colors
addCoef.col = "black",  # Show numbers in black on top of colors
tl.col = "black",   # Keep variable labels in black for readability
cl.cex = 0.8        # Reduce legend text size
)
var_start_season = '2017/2018'
team_counts <- data %>%
group_by(team) %>%
summarise(
season_count = n_distinct(season),
total_matches_after_VAR = sum(season >= var_start_season, na.rm = TRUE),
total_matches_before_VAR = sum(season < var_start_season, na.rm = TRUE)
)
team_counts <- team_counts %>%
filter(total_matches_after_VAR != 0 & total_matches_before_VAR != 0)
valid_team <- team_counts %>%
pull(team)
data_team <- data %>%
filter(team %in% valid_team)
team_season <- data_team %>%
group_by(team, season, treated, postVar, top) %>%
summarise(
total_matches = n(),
total_yellow_cards = sum(yellow_cards, na.rm = TRUE),
total_red_cards = sum(red_cards, na.rm = TRUE),
total_fouls_committed = sum(fouls_commited, na.rm = TRUE),
total_points = sum(case_when(result == "W" ~ 3, result == "D" ~ 1, result == "L" ~ 0, TRUE ~ 0)),
avg_fouls_commited_per_match = mean(fouls_commited, na.rm = TRUE),
avg_fouls_total_per_match = mean(fouls_commited + fouls_opponent, na.rm = TRUE),
avg_yellow_cards_per_match = mean(yellow_cards, na.rm = TRUE),
avg_red_cards_per_match = mean(red_cards, na.rm = TRUE),
) %>%
mutate(DID = postVar * treated)%>%
ungroup()
str(team_season)
team_season <- team_season %>%
rename(
avg_fouls = avg_fouls_commited_per_match,
avg_yellow = avg_yellow_cards_per_match,
avg_red = avg_red_cards_per_match,
avg_foul = avg_fouls_commited_per_match,
matches = total_matches,
yellow_cards = total_yellow_cards,
red_cards= total_red_cards,
fouls = total_fouls_committed
)
team_season %>%
group_by(treated)%>%
summarize(n(),
n_distinct(team))
View(team_season)
str(team_season)
cor_data <- subset(team_season, select = c('treated',
'avg_yellow_cards',
'postVar',
'top',
'avg_foul',
'total_points',
'avg_yellow',
"avg_red",
'DID'
))
cor_data <- subset(team_season, select = c('treated',
'postVar',
'top',
'avg_foul',
'total_points',
'avg_yellow',
"avg_red",
'DID'
))
corr_matrix <- cor(cor_data, use = "complete.obs", method = "pearson")
corrplot(corr_matrix,
method = "color",  # Use colors instead of numbers for a cleaner look
type = "upper",     # Show only the upper triangle to save space
tl.cex = 0.8,       # Reduce text size of variable names
number.cex = 0.7,   # Reduce correlation value size
col = colorRampPalette(c("blue", "white", "red"))(200),  # Gradient colors
addCoef.col = "black",  # Show numbers in black on top of colors
tl.col = "black",   # Keep variable labels in black for readability
cl.cex = 0.8        # Reduce legend text size
)
library(dplyr)
library(readr)
library(ggplot2)
library(tidyr)
library(sjlabelled)
library(ggrepel)
library(scales)
library(ggpubr)
library(fixest)
library(lmtest)
library(modelsummary)
library(skimr)
library(corrplot)
library(lubridate)
library(plm)
library(car)
library(zoo)
library(xtable)
rm(list=ls())
setwd("C:/Users/Пользователь/Desktop/MA1y/Data_Analysis_4/DA4_final_project")
data <- read_delim("data.csv", delim = ",", quote = '"')
data$...1 <- NULL
data0 <- data %>%
group_by(id_match) %>%
mutate(match_pair = paste(sort(team), collapse = " vs ")) %>%
ungroup()
away_subset <- data0 %>%
filter(status == 'AwayTeam') %>%
select(id_match, team, yellow_cards, red_cards, top)
colnames(away_subset) <- c('id_match', 'A_team', 'A_yellow_cards',
'A_red_cards', 'A_top')
data0 <- data0 %>%
filter(status == 'HomeTeam')
data0 <- left_join(data0, away_subset, by = "id_match")
str(data0)
#is_top:
#0: 0 top teams
#1: 1 top team
#2: both teams are top
data0$is_top <- ifelse(data0$top == 1 & data0$A_top == 1, 2,
ifelse((data0$top == 1 & data0$A_top == 0)|(data0$top == 0 & data0$A_top == 1), 1, 0))
data0 <- data0 %>%
select(id_match, league, season, date, match_pair, team, A_team,
fouls_commited, fouls_opponent, yellow_cards, A_yellow_cards,
red_cards, A_red_cards, top, A_top, is_top, everything())
data0 <- data0 %>%
rename(
HT = team,
AT = A_team,
H_fouls = fouls_commited,
A_fouls = fouls_opponent,
top_level = is_top
)
var_start_season = '2017/2018'
str(data0)
match_counts <- data0 %>%
group_by(match_pair) %>%
summarise(
season_count = n_distinct(season),
total_matches_after_VAR = sum(season >= var_start_season, na.rm = TRUE),  # Count occurrences after VAR
total_matches_before_VAR = sum(season < var_start_season, na.rm = TRUE)   # Count occurrences before VAR
)
match_counts <- match_counts %>%
filter(total_matches_after_VAR != 0 & total_matches_before_VAR != 0)
valid_matches <- match_counts %>%
pull(match_pair)
data0 <- data0 %>%
filter(match_pair %in% valid_matches) %>%
select(-match_pair)
data0 <- data0 %>%
mutate(match = paste(HT, AT, sep = " vs "))
data0 %>%
summarize(n_distinct(match))
#---------------------Analysis-by-Matches-Unbalanced-Data-----------------------
match_season <- data0 %>%
group_by(match, season, treated, postVar, top_level) %>%
summarise(
yellow_cards = sum(yellow_cards + A_yellow_cards, na.rm = TRUE),
red_cards = sum(red_cards + A_red_cards, na.rm = TRUE),
fouls = sum(H_fouls + A_fouls, na.rm = TRUE),
) %>%
mutate(DID = postVar * treated,
league = ifelse(treated == 1, 'Bundesliga', 'EPL'))%>%
ungroup()
str(match_season2)
match_season2 <- match_season
match_season2 <- match_season2 %>%
group_by(match) %>%
summarize(avg_red_cards = mean(red_cards),
avg_yellow_cards = mean(yellow_cards),
avg_fouls = mean(fouls),
DID = sum(DID),
top_level = sum(top_level))
cor_data <- subset(match_season2, select = c('top_level',
'avg_yellow_cards',
'avg_fouls',
'avg_red_cards',
"DID"
))
corr_matrix <- cor(cor_data, use = "complete.obs", method = "pearson")
corrplot(corr_matrix,
method = "color",  # Use colors instead of numbers for a cleaner look
type = "upper",     # Show only the upper triangle to save space
tl.cex = 0.8,       # Reduce text size of variable names
number.cex = 0.7,   # Reduce correlation value size
col = colorRampPalette(c("blue", "white", "red"))(200),  # Gradient colors
addCoef.col = "black",  # Show numbers in black on top of colors
tl.col = "black",   # Keep variable labels in black for readability
cl.cex = 0.8        # Reduce legend text size
)
print(xtable(head(match_season)), include.rownames = FALSE)
match_season %>%
summarize(n_distinct(match))
descr <- skim(match_season)
print(xtable(descr), include.rownames = FALSE)
ggplot(match_season, aes(x = league, fill = league)) +
geom_bar() +
labs(title = "Number of Matches per League", x = "League", y = "Count") +
theme_minimal()
ggplot(match_season, aes(x = league, y = red_cards, fill = factor(postVar))) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Total Red Cards per League (Pre-VAR vs. Post-VAR)",
x = "League",
y = "Total Red Cards",
fill = "VAR Implementation") +
theme_minimal()
ggplot(match_season, aes(x = as.factor(postVar), y = yellow_cards, fill = as.factor(postVar))) +
geom_boxplot(alpha = 0.7, outlier.color = "red", outlier.shape = 16) +  # Adds boxplot with outlier settings
facet_wrap(~league) +  # Divides the plot by league
labs(title = "Boxplot: Total Red Cards Distribution by Post VAR and League",
x = "Post VAR (0 = Before, 1 = After)",
y = "Total Red Cards") +
scale_fill_manual(values = c("blue", "orange"), name = "Post VAR") +  # Custom colors
theme_minimal() +
theme(legend.position = "top")
View(match_season)
View(match_season2)
ggplot(match_season, aes(x = as.factor(postVar), y = red_cards, fill = as.factor(postVar))) +
geom_boxplot(alpha = 0.7, outlier.color = "red", outlier.shape = 16) +  # Adds boxplot with outlier settings
facet_wrap(~league) +  # Divides the plot by league
labs(title = "Boxplot: Total Red Cards Distribution by Post VAR and League",
x = "Post VAR (0 = Before, 1 = After)",
y = "Total Red Cards") +
scale_fill_manual(values = c("blue", "orange"), name = "Post VAR") +  # Custom colors
theme_minimal() +
theme(legend.position = "top")
ggplot(match_season2, aes(x = as.factor(postVar), y = avg_red_cards, fill = as.factor(postVar))) +
geom_boxplot(alpha = 0.7, outlier.color = "red", outlier.shape = 16) +  # Adds boxplot with outlier settings
facet_wrap(~league) +  # Divides the plot by league
labs(title = "Boxplot: Total Red Cards Distribution by Post VAR and League",
x = "Post VAR (0 = Before, 1 = After)",
y = "Total Red Cards") +
scale_fill_manual(values = c("blue", "orange"), name = "Post VAR") +  # Custom colors
theme_minimal() +
theme(legend.position = "top")
View(match_season2)
match_season2 <- match_season
match_season2 <- match_season2 %>%
group_by(match, league) %>%
summarize(avg_red_cards = mean(red_cards),
avg_yellow_cards = mean(yellow_cards),
avg_fouls = mean(fouls),
DID = sum(DID),
top_level = sum(top_level))
ggplot(match_season2, aes(x = as.factor(postVar), y = avg_red_cards, fill = as.factor(postVar))) +
geom_boxplot(alpha = 0.7, outlier.color = "red", outlier.shape = 16) +  # Adds boxplot with outlier settings
facet_wrap(~league) +  # Divides the plot by league
labs(title = "Boxplot: Total Red Cards Distribution by Post VAR and League",
x = "Post VAR (0 = Before, 1 = After)",
y = "Total Red Cards") +
scale_fill_manual(values = c("blue", "orange"), name = "Post VAR") +  # Custom colors
theme_minimal() +
theme(legend.position = "top")
View(match_season2)
ggplot(match_season2, aes(x = as.factor(postVar), y = avg_red_cards, fill = as.factor(league))) +
geom_boxplot(alpha = 0.7, outlier.color = "red", outlier.shape = 16) +  # Adds boxplot with outlier settings
facet_wrap(~league) +  # Divides the plot by league
labs(title = "Boxplot: Total Red Cards Distribution by Post VAR and League",
x = "Post VAR (0 = Before, 1 = After)",
y = "Total Red Cards") +
scale_fill_manual(values = c("blue", "orange"), name = "Post VAR") +  # Custom colors
theme_minimal() +
theme(legend.position = "top")
ggplot(match_season2, aes(x = as.factor(league), y = avg_red_cards, fill = as.factor(league))) +
geom_boxplot(alpha = 0.7, outlier.color = "red", outlier.shape = 16) +  # Adds boxplot with outlier settings
facet_wrap(~league) +  # Divides the plot by league
labs(title = "Boxplot: Total Red Cards Distribution by Post VAR and League",
x = "Post VAR (0 = Before, 1 = After)",
y = "Total Red Cards") +
scale_fill_manual(values = c("blue", "orange"), name = "Post VAR") +  # Custom colors
theme_minimal() +
theme(legend.position = "top")
ggplot(match_season, aes(x = as.factor(postVar), y = yellow_cards, fill = as.factor(postVar))) +
geom_boxplot(alpha = 0.7, outlier.color = "red", outlier.shape = 16) +  # Adds boxplot with outlier settings
facet_wrap(~league) +  # Divides the plot by league
labs(title = "Boxplot: Total Red Cards Distribution by Post VAR and League",
x = "Post VAR (0 = Before, 1 = After)",
y = "Total Red Cards") +
scale_fill_manual(values = c("blue", "orange"), name = "Post VAR") +  # Custom colors
theme_minimal() +
theme(legend.position = "top")
View(match_season)
View(data0)
View(data)
View(data)
teamd <- data %>%
group_by(team, league, season, postvar)
teamd <- data %>%
group_by(team, league, season, postVar)
View(teamd)
teamd <- data %>%
group_by(team, league, season, postVar)%>%
summarize(avg_red = mean(red_cards))
View(teamd)
teamd <- data %>%
group_by(team, league, season, postVar)%>%
summarize(avg_red = mean(red_cards))
ggplot(teamd, aes(x = as.factor(postVar), y = avg_red, fill = as.factor(postVar))) +
geom_boxplot(alpha = 0.7, outlier.color = "red", outlier.shape = 16) +  # Adds boxplot with outlier settings
facet_wrap(~league) +  # Divides the plot by league
labs(title = "Boxplot: Total Red Cards Distribution by Post VAR and League",
x = "Post VAR (0 = Before, 1 = After)",
y = "Total Red Cards") +
scale_fill_manual(values = c("blue", "orange"), name = "Post VAR") +  # Custom colors
theme_minimal() +
theme(legend.position = "top")
ggplot(teamd, aes(x = as.factor(postVar), y = avg_red, fill = as.factor(postVar))) +
geom_boxplot(alpha = 0.7, outlier.color = "red", outlier.shape = 16) +  # Adds boxplot with outlier settings
facet_wrap(~league) +  # Divides the plot by league
labs(title = "Boxplot: Total Red Cards Distribution by Post VAR and League",
x = "Post VAR (0 = Before, 1 = After)",
y = "Total Red Cards") +
scale_fill_manual(values = c("blue", "orange"), name = "Post VAR") +  # Custom colors
theme_minimal() +
theme(legend.position = "top") +
coord_cartesian(ylim = c(0, 0.5))
ggplot(teamd, aes(x = as.factor(postVar), y = avg_red, fill = as.factor(postVar))) +
geom_boxplot(alpha = 0.7, outlier.color = "red", outlier.shape = 16) +  # Adds boxplot with outlier settings
facet_wrap(~league) +  # Divides the plot by league
labs(title = "Avearge Red Cards Distribution by Post VAR and League",
x = "Post VAR (0 = Before, 1 = After)",
y = "Total Red Cards") +
scale_fill_manual(values = c("blue", "orange"), name = "Post VAR") +  # Custom colors
theme_minimal() +
theme(legend.position = "top") +
coord_cartesian(ylim = c(0, 0.5))
ggplot(teamd, aes(x = as.factor(postVar), y = avg_red, fill = as.factor(postVar))) +
geom_boxplot(alpha = 0.7, outlier.color = "red", outlier.shape = 16) +  # Adds boxplot with outlier settings
facet_wrap(~league) +  # Divides the plot by league
labs(title = "Avearge Red Cards Distribution by Post VAR and League",
x = "Post VAR (0 = Before, 1 = After)",
y = "Total Red Cards") +
scale_fill_manual(values = c("blue", "orange"), name = "Post VAR") +  # Custom colors
theme_minimal() +
theme(legend.position = "top") +
coord_cartesian(ylim = c(0, 0.3))
ggplot(teamd, aes(x = as.factor(postVar), y = avg_red, fill = as.factor(postVar))) +
geom_boxplot(alpha = 0.7, outlier.color = "red", outlier.shape = 16) +  # Adds boxplot with outlier settings
facet_wrap(~league) +  # Divides the plot by league
labs(title = "Average Red Cards Distribution by Post VAR and League",
x = "Post VAR (0 = Before, 1 = After)",
y = "Total Red Cards") +
scale_fill_manual(values = c("blue", "orange"), name = "Post VAR") +  # Custom colors
theme_minimal() +
theme(legend.position = "top") +
coord_cartesian(ylim = c(0, 0.3))
library(dplyr)
library(readr)
library(ggplot2)
library(tidyr)
library(sjlabelled)
library(ggrepel)
library(scales)
library(ggpubr)
library(fixest)
library(lmtest)
library(modelsummary)
library(skimr)
library(corrplot)
library(lubridate)
library(plm)
rm(list=ls())
setwd("C:/Users/Пользователь/Desktop/MA1y/Data_Analysis_4/DA4_final_project")
data <- read_delim("data2.csv", delim = ",", quote = '"')
data$...1 <- NULL
data0 <- data %>%
group_by(id_match) %>%
mutate(match_pair = paste(sort(team), collapse = " vs ")) %>%
ungroup()
away_subset <- data0 %>%
filter(status == 'AwayTeam') %>%
select(id_match, team, yellow_cards, red_cards)
colnames(away_subset) <- c('id_match', 'A_team', 'A_yellow_cards',
'A_red_cards')
data0 <- data0 %>%
filter(status == 'HomeTeam')
data0 <- left_join(data0, away_subset, by = "id_match")
str(data0)
data0 <- data0 %>%
select(id_match, league, season, date, match_pair, team, A_team,
fouls_commited, fouls_opponent, yellow_cards, A_yellow_cards,
red_cards, A_red_cards, everything())
data0 <- data0 %>%
rename(
HT = team,
AT = A_team,
H_fouls = fouls_commited,
A_fouls = fouls_opponent
)
var_start_season = '2019/2020'
match_counts <- data0 %>%
group_by(match_pair) %>%
summarise(
season_count = n_distinct(season),
total_matches_after_VAR = sum(season >= var_start_season, na.rm = TRUE),  # Count occurrences after VAR
total_matches_before_VAR = sum(season < var_start_season, na.rm = TRUE)   # Count occurrences before VAR
)
match_counts <- match_counts %>%
filter(total_matches_after_VAR != 0 & total_matches_before_VAR != 0)
valid_matches <- match_counts %>%
pull(match_pair)
data0 <- data0 %>%
filter(match_pair %in% valid_matches) %>%
select(-match_pair)
data0 <- data0 %>%
mutate(match = paste(HT, AT, sep = " vs "))
data0 %>%
summarize(n_distinct(match))
View(data)
teamd <- data %>%
group_by(team, league, season, postVar)%>%
summarize(avg_red = mean(red_cards))
ggplot(teamd, aes(x = as.factor(postVar), y = avg_red, fill = as.factor(postVar))) +
geom_boxplot(alpha = 0.7, outlier.color = "red", outlier.shape = 16) +  # Adds boxplot with outlier settings
facet_wrap(~league) +  # Divides the plot by league
labs(title = "Average Red Cards Distribution by Post VAR and League",
x = "Post VAR (0 = Before, 1 = After)",
y = "Total Red Cards") +
scale_fill_manual(values = c("blue", "orange"), name = "Post VAR") +  # Custom colors
theme_minimal() +
theme(legend.position = "top") +
coord_cartesian(ylim = c(0, 0.3))
View(teamd)
